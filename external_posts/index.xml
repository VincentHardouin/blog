<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>External_posts on Vincent Hardouin</title><link>https://vincenthardouin.dev/external_posts/</link><description>Recent content in External_posts on Vincent Hardouin</description><generator>Hugo -- gohugo.io</generator><language>FR-fr</language><lastBuildDate>Mon, 22 May 2023 09:00:00 +0000</lastBuildDate><atom:link href="https://vincenthardouin.dev/external_posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Comparer deux dossiers en ligne de commande</title><link>https://vincenthardouin.dev/posts/comparer-deux-dossiers/</link><pubDate>Mon, 06 Mar 2023 21:07:00 +0200</pubDate><guid>https://vincenthardouin.dev/posts/comparer-deux-dossiers/</guid><description>&lt;p>Parfois, nous pouvons avoir besoin de comparer le contenu de deux dossiers et éventuellement de leurs sous-dossiers,
sans
comparer leur contenu, mais uniquement leur nom.&lt;/p>
&lt;p>Si vous souhaitez comparer le contenu des fichiers, vous pouvez
consulter &lt;a href="https://jbuget.fr/posts/techniques-pour-fusionner-deux-versions-d-un-projet-shopify-grace-a-git/">l&amp;rsquo;article de Jérémy Buget qui traite le sujet.&lt;/a>&lt;/p>
&lt;h2 id="1er-cas--comparer-deux-dossiers-sans-sous-dossiers">1er cas : comparer deux dossiers sans sous-dossiers&lt;/h2>
&lt;p>Pour ce faire, j&amp;rsquo;en suis arrivé à la commande suivante :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">diff &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ou encore pour avoir un autre affichage du diff :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">diff --unified &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dans cette commande, nous pouvons y trouver &lt;code>&amp;lt;()&lt;/code>.
Il s&amp;rsquo;agit
du &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html#Process-Substitution">Process Substitution&lt;/a>
qui permet d&amp;rsquo;éviter de stocker le résultat d&amp;rsquo;une commande dans un fichier temporaire pour s&amp;rsquo;en servir ensuite.&lt;/p>
&lt;p>Cela réduit considérablement le nombre de commandes, nous nous retrouvons avec les commandes du dessus au lieu de :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ls dir1 &amp;gt; tmp_dir1.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls dir2 &amp;gt; tmp_dir2.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diff tmp_dir1.txt tmp_dir2.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm tmp_dir1.txt tmp_dir2.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Revenons à nos premières commandes en analysant le résultat de celles-ci.&lt;/p>
&lt;p>Pour les exemples suivants, j&amp;rsquo;ai créé deux dossiers :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── dir1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── waldo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── garply.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── dir2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> directories, &lt;span class="m">7&lt;/span> files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nous pouvons donc voir que &lt;code>foo.html&lt;/code> et &lt;code>index.html&lt;/code> sont présents dans les deux dossiers, &lt;code>bar.html&lt;/code>
et &lt;code>waldo/garply.html&lt;/code> uniquement dans le premier.&lt;/p>
&lt;p>En lançant ces commandes, nous obtenons ce résultat :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ diff &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1c1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4d3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette commande renvoie uniquement les différences entre les deux dossiers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ diff --unified &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- /dev/fd/11 2023-03-06 18:33:47
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+++ /dev/fd/12 2023-03-06 18:33:47
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@@ -1,4 +1,3 @@
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Celle-ci, nous montre un diff façon git.&lt;/p>
&lt;p>Ces commandes peuvent être suffisantes, mais nous pouvons aller plus loin et répondre à plus de cas d&amp;rsquo;usage avec la
commande &lt;code>comm&lt;/code>.&lt;/p>
&lt;p>Elle nous permet par exemple de voir uniquement les fichiers présents et/ou manquants dans un des dossiers.&lt;/p>
&lt;p>Voyons voir le résultat de cette commande sans option :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ comm &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nous pouvons distinguer 3 colonnes séparées par des tabulations :&lt;/p>
&lt;ul>
&lt;li>La première correspond au fichier présent que dans le premier dossier&lt;/li>
&lt;li>La deuxième, uniquement dans le second&lt;/li>
&lt;li>La troisième, les fichiers en commun&lt;/li>
&lt;/ul>
&lt;p>Nous nous retrouvons à mon sens avec un diff plus explicite.&lt;/p>
&lt;p>Attention, il faut que les fichiers passés en paramètres soient triés par ordre alphabétique pour que la commande
fonctionne correctement.&lt;/p>
&lt;p>Maintenant que nous avons vu l&amp;rsquo;usage basique, nous pouvons utiliser les options.
Nous pouvons afficher des colonnes spécifiques grâce à l&amp;rsquo;option &lt;code>-&lt;/code> suivi
des numéros de colonne à ne pas afficher.&lt;/p>
&lt;p>Exemple :&lt;/p>
&lt;ul>
&lt;li>Afficher uniquement les fichiers en commun :&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ comm -12 &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Afficher uniquement les fichiers manquants dans le deuxième dossier :&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ comm -23 &amp;lt;&lt;span class="o">(&lt;/span>ls dir1&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>ls dir2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2ème-cas--comparer-deux-dossiers-avec-des-sous-dossiers">2ème cas : comparer deux dossiers avec des sous-dossiers&lt;/h2>
&lt;p>Pour ce cas, nous allons utiliser la commande &lt;code>diff&lt;/code> avec l&amp;rsquo;option &lt;code>-r&lt;/code> qui permet de comparer récursivement les
dossiers :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ diff -r dir1 dir2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Only in dir1: bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Only in dir2: corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Only in dir1: waldo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette commande nous permet de voir les différences entre les deux dossiers, mais nous ne pouvons pas voir les fichiers
des sous-dossiers manquants.&lt;/p>
&lt;p>Pour cela, nous allons utiliser la commande &lt;code>find&lt;/code> qui, en plus de pouvoir chercher un fichier, permet de lister les
fichiers d&amp;rsquo;un dossier et de ses sous-dossiers.&lt;/p>
&lt;p>Utilisée seule, elle donne :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ find dir1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1/index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1/bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1/foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1/waldo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dir1/waldo/garply.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comme nous pouvons le voir, elle nous donne le chemin complet des fichiers, ce qui n&amp;rsquo;est pas très pratique pour la
suite. Nous utiliserons en plus la commande &lt;code>sed&lt;/code> qui permet de remplacer une chaîne de caractères pour ne pas avoir le
nom du dossier dans lequel nous cherchons.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ find dir1 &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/dir1//g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/waldo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/waldo/garply.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nous obtenons donc le résultat que nous voulons pour pouvoir utiliser la commande &lt;code>comm&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">❯ comm &amp;lt;&lt;span class="o">(&lt;/span>find dir1 &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/dir1//g&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>find dir2 &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/dir2//g&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/bar.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /corge.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /foo.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /index.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/waldo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/waldo/garply.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Nous avons vu comment comparer deux dossiers en ligne de commande, avec ou sans sous-dossiers.
L&amp;rsquo;usage de comm nous permet, je trouve, d&amp;rsquo;avoir un affichage plus explicite que celui de diff et de répondre à plus de
cas d&amp;rsquo;usage.&lt;/p>
&lt;p>Si vous souhaitez voir un cas d&amp;rsquo;usage de ces
commandes &lt;a href="https://github.com/1024pix/pix-site/pull/395">vous pouvez consulter cette Pull Request&lt;/a> où cela m&amp;rsquo;a été
utile.&lt;/p></description></item><item><title>Projet - Comptrain WOD history</title><link>https://vincenthardouin.dev/posts/comptrain-wod-history/</link><pubDate>Tue, 12 Jul 2022 11:07:00 +0200</pubDate><guid>https://vincenthardouin.dev/posts/comptrain-wod-history/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>J&amp;rsquo;ai récemment créé un projet pour historiser tous les WOD proposés par &lt;a href="https://comptrain.co/">Comptrain&lt;/a>.&lt;/p>
&lt;p>La programmation de Comptrain est l&amp;rsquo;une des programmations de Crossfit les plus reconnues dans son milieu,
notamment grâce à la renommée de son créateur &lt;a href="https://benbergeron.com/about/">Ben Bergeron&lt;/a>
qui a entre autres entrainé Mathew Fraser 5 fois vainqueur des CrossFit Games.&lt;/p>
&lt;p>L&amp;rsquo;équipe de Comptrain propose une programmation gratuite. Elle est constituée d&amp;rsquo;un WOD tous les jours de la semaine
sauf le jeudi et le dimanche, qui sont des &amp;ldquo;REST DAY&amp;rdquo;.&lt;/p>
&lt;p>Cependant, l&amp;rsquo;historique des WODS n&amp;rsquo;est pas disponible.
Ce qui devient problématique quand vous souhaitez vous entrainer le jeudi et/ou le dimanche
et que vous n&amp;rsquo;avez pas pris une capture d&amp;rsquo;écran la veille. Vous vous retrouvez sans entrainement
et surtout vous n&amp;rsquo;allez pas suivre la programmation.&lt;/p>
&lt;h2 id="projet">Projet&lt;/h2>
&lt;p>À force de subir ce problème, j&amp;rsquo;ai décidé d&amp;rsquo;historiser les WODs en les enregistrant dans une
base de données.&lt;/p>
&lt;p>Je suis parti sur une architecture contenant &lt;strong>une API&lt;/strong> et un site statique.&lt;/p>
&lt;p>L&amp;rsquo;API a comme rôle :&lt;/p>
&lt;ul>
&lt;li>de récupérer grâce à un &lt;a href="https://en.wikipedia.org/wiki/Cron">CRON&lt;/a> les WODs&lt;/li>
&lt;li>fournir un endpoint permettant de récupérer tous les WODs&lt;/li>
&lt;/ul>
&lt;p>Le &lt;strong>site statique&lt;/strong> quant à lui doit appeler l&amp;rsquo;endpoint et afficher tous les WODs.&lt;/p>
&lt;p>La stack de l&amp;rsquo;API se compose de :&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.fastify.io/">Fastify&lt;/a> comme serveur NodeJS, que je trouve pratique et simple d&amp;rsquo;utilisation.&lt;/li>
&lt;li>&lt;a href="https://www.prisma.io/">Prisma&lt;/a> comme ORM. J&amp;rsquo;ai choisi ce dernier, car je ne le connaissais pas et que j&amp;rsquo;en avais
entendu du bien. Naturellement, j&amp;rsquo;ai voulu l&amp;rsquo;essayer. Il s&amp;rsquo;avère que pour l&amp;rsquo;usage que j&amp;rsquo;en fais, je ne l&amp;rsquo;ai pas essayé
dans ses retranchements.&lt;/li>
&lt;li>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> comme base de données.&lt;/li>
&lt;/ul>
&lt;p>Enfin, pour le site statique, je suis parti sur une application &lt;a href="https://nuxtjs.org/">NuxtJS&lt;/a>, qui permet la
génération statique du site.&lt;/p>
&lt;p>Pour l&amp;rsquo;hébergement, nous nous retrouvons avec l&amp;rsquo;API qui tourne sur mon VPS et le site statique hébergé sur GitHub Pages.
La génération du site est déclenchée chaque jour grâce à une GitHub Action
via &lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">un event schedule&lt;/a>&lt;/p>
&lt;p>La solution fonctionne, la base comporte désormais 180 WODs, mais plusieurs éléments peuvent être améliorés.&lt;/p>
&lt;h2 id="changement-darchitecture">Changement d&amp;rsquo;architecture&lt;/h2>
&lt;p>Nous avons dans cette configuration une base de données et une API qui tourne 24h/24 dans l&amp;rsquo;attente d&amp;rsquo;une
insertion et une lecture de toute la table tous les jours. Cela &lt;strong>consomme des ressources inutilement&lt;/strong>.&lt;/p>
&lt;p>Nous pouvons alors nous demander si cela convient avec les besoins futurs.&lt;/p>
&lt;h3 id="perspective-dévolution">Perspective d&amp;rsquo;évolution&lt;/h3>
&lt;h4 id="volumétrie">Volumétrie&lt;/h4>
&lt;p>Intéressons-nous à la volumétrie de la base de données.
Il y a moins de 365 WODs/an : &lt;strong>365 wods/an * 100 ans = 36 500 wods&lt;/strong>.
Nous pouvons dire que la volumétrie globale n&amp;rsquo;excédera jamais les 100 000 éléments.&lt;/p>
&lt;h4 id="amélioration">Amélioration&lt;/h4>
&lt;p>Ensuite, l&amp;rsquo;unique amélioration que j&amp;rsquo;envisage est la recherche par mouvements (squats, push-ups, pull-ups, …) pour
choisir d&amp;rsquo;en avoir certains et d&amp;rsquo;autres non.&lt;/p>
&lt;p>En connaissant cette volumétrie et l&amp;rsquo;amélioration que je souhaite faire, nous nous rendons compte que n&amp;rsquo;importe quelle
base de données et/ou langage est capable de répondre à ces besoins.&lt;/p>
&lt;h3 id="déroulement">Déroulement&lt;/h3>
&lt;p>Un dimanche, j&amp;rsquo;ai fait le choix de réduire toute cette consommation.&lt;/p>
&lt;p>L&amp;rsquo;idée que j&amp;rsquo;ai est de retirer la dépendance à mon VPS et que tout soit directement hébergé dans le repository
GitHub.&lt;/p>
&lt;p>Pour cela, il me fallait changer de base de données et changer la façon dont les données étaient récupérées au moment de
la génération du site statique.&lt;/p>
&lt;h3 id="réalisation">Réalisation&lt;/h3>
&lt;h4 id="migration-de-la-base-de-données">Migration de la base de données&lt;/h4>
&lt;p>Dans un premier temps, j&amp;rsquo;ai migré de PostgreSQL vers SQLite, une base de données bien plus légère comme son nom
l&amp;rsquo;indique. Les avantages de SQLite sont les suivants :&lt;/p>
&lt;ul>
&lt;li>très léger&lt;/li>
&lt;li>la base de données est stockée directement dans un fichier, ce qui va dans l&amp;rsquo;optique d&amp;rsquo;être stocké dans le repository&lt;/li>
&lt;li>un connecteur intégré à Prisma existe, ce qui me facilite la migration&lt;/li>
&lt;/ul>
&lt;p>Pour faire la migration :&lt;/p>
&lt;ol>
&lt;li>Exporter la table dans un fichier CSV :&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">COPY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workouts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;tmp/workouts_db.csv&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DELIMITER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;,&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CSV&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HEADER&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Importer la table dans SQLite :&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.import workouts_db.csv workouts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Du côté de Prisma, comme indiqué
dans &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/prisma-migrate-limitations-issues">la documentation&lt;/a> :&lt;/p>
&lt;ol>
&lt;li>Dans le fichier &lt;code>schema.prisma&lt;/code>, il faut changer le provider et l&amp;rsquo;url.&lt;/li>
&lt;li>Supprimer le dossier &lt;code>prisma/migrations&lt;/code>&lt;/li>
&lt;li>Rejouer les migrations avec &lt;code>prisma migrate dev&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>Cependant, lorsque j&amp;rsquo;ai voulu récupérer les données via Prisma, cela ne fonctionnait pas.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node -p &lt;span class="s2">&amp;#34;const { PrismaClient } = require(&amp;#39;@prisma/client&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">new PrismaClient()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .workout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .findMany({ select: { title: true, createdAt: true }})
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .then(console.log);&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;erreur en question :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">Inconsistent column data: Conversion failed: input contains invalid characters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Je me suis alors dit que le problème venait du format des dates. Pour vérifier cela, j&amp;rsquo;ai d&amp;rsquo;abord demandé les WODs sans
la date de création.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node -p &lt;span class="s2">&amp;#34;const { PrismaClient } = require(&amp;#39;@prisma/client&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">new PrismaClient()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .workout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .findMany({ select: { title: true }})
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .then(console.log);&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Là je constate que ça fonctionne.&lt;/p>
&lt;p>En effet, les dates étaient sous le format &lt;a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601&lt;/a>
(ex: 2022-01-07 14:43:00.432).
Seulement, en essayant d&amp;rsquo;insérer des données à l&amp;rsquo;aide de Prisma, nous pouvons voir que
Prisma insère des dates sous le format &lt;a href="https://en.wikipedia.org/wiki/Unix_time">UNIX Epoch&lt;/a> (ex: 1641566580) :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node -p &lt;span class="s2">&amp;#34;const { PrismaClient } = require(&amp;#39;@prisma/client&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">new PrismaClient()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .workout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .create({
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> data: { title: &amp;#39;test&amp;#39;, content: &amp;#39;&amp;#39;},
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> select: { createdAt: true }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> })
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> .then(console.log);&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> createdAt: 2022-07-17T15:51:05.791Z &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Et en base nous retrouvons :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;createdAt&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workouts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">1658073065791&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Il m&amp;rsquo;a alors suffi d&amp;rsquo;importer les données dans une table temporaire puis de les importer dans la table finale en
convertissant les dates :&lt;/p>
&lt;ol>
&lt;li>Je supprime la base précédemment créée :&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workouts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Je réimporte les données dans une table temporaire&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workouts_db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;workouts-tmp&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>J&amp;rsquo;insère les données dans la table &lt;code>workouts&lt;/code> en me basant sur la table &lt;code>workouts_temp&lt;/code> mais en convertissant les
dates :&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">workouts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%s&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%s&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;workouts-tmp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Je supprime la table temporaire&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;workouts-tmp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nous avons désormais migré notre base de PostgreSQL vers SQLite, nous pouvons maintenant inclure notre base dans le
repository.&lt;/p>
&lt;h4 id="migration-de-lapi">Migration de l&amp;rsquo;API&lt;/h4>
&lt;p>Pour ce qui est de l&amp;rsquo;API, au lieu qu&amp;rsquo;elle tourne en permanence, j&amp;rsquo;ai décidé de la lancer uniquement au moment où le site
se génère.&lt;/p>
&lt;p>Je n&amp;rsquo;ai pas
utilisé &lt;a href="https://docs.github.com/en/actions/using-containerized-services/about-service-containers">les services des GitHub Actions&lt;/a>
étant limités à des images Docker dont je n&amp;rsquo;ai pas envie dans mon idée de moins de dépendance possible.&lt;/p>
&lt;p>Je me suis tourné vers la modification de la génération du site statique : pour ajouter le lancement de l&amp;rsquo;API dans un
processus en tâche de fond.&lt;/p>
&lt;p>Voilà le résultat :&lt;/p>
&lt;pre tabindex="0">&lt;code>(cd api &amp;amp;&amp;amp; npm start &amp;amp;); cd webapp &amp;amp;&amp;amp; npm run generate
&lt;/code>&lt;/pre>&lt;p>Vous pouvez trouver la GitHub Action complète
ici : &lt;a href="https://github.com/VincentHardouin/comptrain-wod-history/blob/main/.github/workflows/deploy.yml">https://github.com/VincentHardouin/comptrain-wod-history/blob/main/.github/workflows/deploy.yml&lt;/a>&lt;/p>
&lt;p>Grâce à ces deux étapes nous n&amp;rsquo;avons plus d&amp;rsquo;API et de base de données qui tournent en permanence.
L&amp;rsquo;hébergement et le déploiement dépendent désormais d&amp;rsquo;uniquement GitHub.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Face à cette problématique d&amp;rsquo;historisation des WODs de Comptrain,
je propose donc &lt;a href="https://wods.vincenthardouin.dev/">ce projet en solution&lt;/a>.
Nous avons pu voir qu&amp;rsquo;avec un peu de remise en question la solution ne me coûte désormais plus d&amp;rsquo;argent et elle peut
être utilisée par tout le monde.
Le code source est disponible à l&amp;rsquo;adresse
suivante : &lt;a href="https://github.com/VincentHardouin/comptrain-wod-history">https://github.com/VincentHardouin/comptrain-wod-history&lt;/a>
.&lt;/p>
&lt;p>Nous pouvons aussi imaginer de nous passer de la base de données en nous basant sur un fichier JSON.
Pour ce qui est de l&amp;rsquo;API, nous aurions pu
utiliser &lt;a href="https://v3.nuxtjs.org/guide/features/server-routes">la solution de NuxtJS avec les servers&lt;/a>, mais je ne suis
pas à l&amp;rsquo;aise avec ce couplage fort avec une solution.&lt;/p></description></item><item><title>Pourquoi vous devriez faire un dotfiles</title><link>https://vincenthardouin.dev/posts/pourquoi-vous-devriez-faire-un-dotfiles/</link><pubDate>Wed, 27 Oct 2021 11:07:00 +0200</pubDate><guid>https://vincenthardouin.dev/posts/pourquoi-vous-devriez-faire-un-dotfiles/</guid><description>&lt;p>Pour mon premier article, je souhaite vous partager comment je mets en place mon environnement de travail facilement.&lt;/p>
&lt;p>Pour cela, j&amp;rsquo;utilise un dotfiles, dossier vous permettant de mettre en place votre configuration, via notamment les
fichiers de configs .zshrc, .vimrc, …&lt;/p>
&lt;p>Je vous incite dès aujourd&amp;rsquo;hui à vous créer un dotfiles, et ce pour plusieurs raisons :&lt;/p>
&lt;p>Mettre en place un set-up de 0 m&amp;rsquo;arrive minimum une fois par an :&lt;/p>
&lt;ul>
&lt;li>quand Apple sort sa nouvelle mise à jour majeure : j&amp;rsquo;effectue alors une clean install.&lt;/li>
&lt;li>installation d&amp;rsquo;un VPS&lt;/li>
&lt;li>mise en place de VM&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Sachant que toute tâche rébarbative doit pouvoir être faite en moins de 10 minutes et être automatisée autant que
possible (cf: &lt;a href="https://www.youtube.com/watch?v=bz0zSVNFW-E">la pensée md10&lt;/a>), la création d&amp;rsquo;un dotfiles parait évidente.&lt;/p>
&lt;p>Les fichiers de configuration sont précieux et proviennent de nombreux petits ajustements. Le dotfiles vous permettra
donc d&amp;rsquo;être assuré de ne rien perdre. Vous pouvez faire de votre dotfiles un repository git, le pusher sur GitHub pour
avoir une sauvegarde et ensuite le cloner pour mettre en place un nouvel environnement.&lt;/p>
&lt;p>Enfin, libre à vous de créer le dotfiles qui vous correspond. Le mien contient mes fichiers de configuration
principaux : .zshrc, .vimrc, .gitconfig, .gitignore_global. Mais surtout, un Makefile chargé de créer des liens
symboliques à partir de ces fichiers et de télécharger les applications que je souhaite, dont brew avec un Brewfile qui
installe tous mes utilitaires. Un vrai gain de temps !&lt;/p>
&lt;p>Si vous souhaitez découvrir plus en détail mon dotfiles, il est disponible
ici : &lt;a href="https://github.com/VincentHardouin/.dotfiles">https://github.com/VincentHardouin/.dotfiles&lt;/a>&lt;/p>
&lt;p>J&amp;rsquo;espère que ces arguments vous donneront envie de créer le vôtre !&lt;/p></description></item></channel></rss>